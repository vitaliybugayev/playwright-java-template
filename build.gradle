plugins {
    id 'java'
    id 'application'
    id "io.freefair.aspectj.post-compile-weaving" version "8.10.2"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Core
    implementation 'com.microsoft.playwright:playwright:1.54.0'
    implementation 'com.aventstack:extentreports:5.1.2'
    implementation 'org.aspectj:aspectjweaver:1.9.24'
    implementation 'org.aspectj:aspectjrt:1.9.24'

    // JUnit 5
    implementation 'org.junit.jupiter:junit-jupiter-api:5.13.4'
    implementation 'org.junit.platform:junit-platform-commons:1.13.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.13.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.4'

    // AssertJ (fluent assertions)
    testImplementation 'org.assertj:assertj-core:3.26.3'
}

// Keep Java parameter names for nicer @Step templates (AspectJ)
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
}

test {
    dependsOn 'playwrightInstall'
    useJUnitPlatform()
    // Forward selected system properties from Gradle to the test JVM.
    // Without this, flags like -Denv=ci or -Dbrowser=firefox won't be visible to tests.
    [
        'env',
        'browser',
        'headless',
        'base_url',
        'slowmo',
        'screenshot',
        'snapshot'
    ].each { key ->
        def value = System.getProperty(key)
        if (value != null) {
            systemProperty key, value
        }
    }
    reports {
        junitXml.required.set(true)
        html.required.set(true)
    }
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

application {
    mainClass.set("com.microsoft.playwright.CLI")
}

tasks.register('playwright', JavaExec) {
    mainClass = 'com.microsoft.playwright.CLI'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('args')) {
        args project.getProperty('args')
    } else {
        args 'open'
    }
}

tasks.register('playwrightInstall', JavaExec) {
    mainClass = 'com.microsoft.playwright.CLI'
    classpath = sourceSets.main.runtimeClasspath
    args = ['install']
}
